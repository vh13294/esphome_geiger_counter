esphome:
  name: nuclear
  friendly_name: nuclearSensor

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "MpKke9/YDOnrgDYMoafoQxPlNhZxCkVhAYbbZdhT2XA="

ota:
  password: "44f6ac6b430e766aa14c844fbd912d6b"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Nuclear Fallback Hotspot"
    password: "z1Hx5mBQ4bMV"

captive_portal:

sensor:
  - platform: pulse_counter
    pin: 19
    unit_of_measurement: "CPM"
    name: "Ionizing Radiation Counts Per Minute"
    id: counter_cpm
    on_value:
      - sensor.template.publish:
          id: counter_uSv_h
          state: !lambda "return x / 153.8;"
      # https://github.com/cdjq/DFRobot_Geiger

  - platform: template
    name: "Ionizing Radiation Power"
    id: "counter_uSv_h"
    unit_of_measurement: "µSv/h"
    icon: mdi:radioactive
    accuracy_decimals: 5

binary_sensor:
  - platform: gpio
    name: "Page 1"
    pin:
      number: 38
    on_press:
      then:
        - display.page.show: page1

  - platform: gpio
    name: "Page 2"
    pin:
      number: 37
    on_press:
      then:
        - display.page.show: page2

  - platform: gpio
    name: "Page 3"
    pin:
      number: 39
    on_press:
      then:
        - display.page.show: page3

font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto25
    size: 25
    glyphs: ["μ", "S", "v", "/", "h", "C", "M", "P"]
  - file: "gfonts://Roboto"
    id: roboto36
    size: 36
  - file: "gfonts://Roboto"
    id: roboto40
    size: 40

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 12

display:
  - platform: ili9xxx
    model: ili9341
    cs_pin: 27
    dc_pin: 32
    reset_pin: 5
    rotation: 90
    pages:
      - id: page1
        lambda: |-
          id(my_animation).next_frame();
          it.image(45, 10, id(my_animation));
          it.print(115, 10, id(roboto40), my_yellow, "Radiation");
          it.printf(5, 80, id(roboto36), "%.3f", id(counter_uSv_h).state);
          it.print(100, 140, id(roboto25), TextAlign::BASELINE_RIGHT, "μSv/h");
          it.printf(15, 160, id(roboto36), "%03.0f", id(counter_cpm).state);
          it.print(90, 220, id(roboto25), TextAlign::BASELINE_RIGHT, "CPM");
          it.graph(115, 70, id(uSv_Hour_graph), my_light_blue);
          it.graph(115, 155, id(cpm_graph), my_yellow);
      - id: page2
        lambda: |-
          it.print(45, 10, id(roboto40), my_yellow, "Sievert Scale");
          it.print(130, 50, id(roboto25), "μSv/h");
          it.print(20, 90, id(roboto36), "0.15 : Normal");
          it.print(20, 140, id(roboto36), "0.60 : Unsafe");
          it.print(20, 190, id(roboto36), "1.50 : Dangerous");
      - id: page3
        lambda: |-
          it.print(60, 10, id(roboto40), my_light_blue, "CPM Scale");
          it.print(15, 80, id(roboto36), "7-30 : Normal");
          it.print(15, 130, id(roboto36), "150 : Safe");
          it.print(15, 180, id(roboto36), "+150 : Dangerous");

output:
  - platform: ledc
    pin: 4
    id: gpio_32_backlight_pwm

light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

animation:
  - file: "radio.gif"
    id: my_animation
    resize: 50x50
    type: RGB24

image:
  - file: "radio.gif"
    id: my_image
    resize: 50x50
    type: RGB24

color:
  - id: my_light_blue
    red: 25%
    green: 20%
    blue: 100%
    white: 0%

  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%

graph:
  # Show bare-minimum auto-ranged graph
  - id: uSv_Hour_graph
    sensor: counter_uSv_h
    duration: 1h
    width: 200
    height: 80
  - id: cpm_graph
    sensor: counter_cpm
    duration: 1h
    width: 200
    height: 80
